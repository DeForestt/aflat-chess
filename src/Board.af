.root "head"
.needs "Board"
.needs <std>
.needs "Pieces/Pawn"
.needs "Pieces/Rook"
.needs "Pieces/Knight"
.needs "Pieces/Bishop"
.needs "Pieces/Queen"
.needs "Pieces/King"
.needs <io>

Board init@Board(){
    my.whitePieces = new LinkedList();
    my.blackPieces = new LinkedList();
    LinkedList whitePieces;
    whitePieces = my.whitePieces;
    LinkedList blackPieces;
    blackPieces = my.blackPieces;

    my.selectedX = 0;
    my.selectedY = 1;
    
    // fill the board with pieces
    for{int i = 0;}(i < 8){i = i + 1}{
        for{int j = 0;}(j < 8){j = j + 1}{
            if (i == 1){
                Pawn p = new Pawn(j, i, 0, my);
                whitePieces.append(p);
            };
            
            if (i == 6){
                Pawn p = new Pawn(j, i, 1, my);
                blackPieces.append(p);
            };

            if (i == 0){
                if (j == 0){
                    Rook r = new Rook(j, i, 0, my);
                    whitePieces.append(r);
                };
                if (j == 7){
                    Rook r = new Rook(j, i, 0, my);
                    whitePieces.append(r);
                };
                if (j == 1){
                    Knight k = new Knight(j, i, 0, my);
                    whitePieces.append(k);
                };
                if (j == 6){
                    Knight k = new Knight(j, i, 0, my);
                    whitePieces.append(k);
                };
                if (j == 2){
                    Bishop b = new Bishop(j, i, 0, my);
                    whitePieces.append(b);
                };
                if (j == 5){
                    Bishop b = new Bishop(j, i, 0, my);
                    whitePieces.append(b);
                };
                if (j == 3){
                    King k = new King(j, i, 0, my);
                    my.whiteKing = k;
                    whitePieces.append(k);
                };
                if (j == 4){
                    Queen q = new Queen(j, i, 0, my);
                    whitePieces.append(q);
                };
            };

            if (i == 7){
                if (j == 0){
                    Rook r = new Rook(j, i, 1, my);
                    blackPieces.append(r);
                };
                if (j == 7){
                    Rook r = new Rook(j, i, 1, my);
                    blackPieces.append(r);
                };
                if (j == 1){
                    Knight k = new Knight(j, i, 1, my);
                    blackPieces.append(k);
                };
                if (j == 6){
                    Knight k = new Knight(j, i, 1, my);
                    blackPieces.append(k);
                };
                if (j == 2){
                    Bishop b = new Bishop(j, i, 1, my);
                    blackPieces.append(b);
                };
                if (j == 5){
                    Bishop b = new Bishop(j, i, 1, my);
                    blackPieces.append(b);
                };
                if (j == 4){
                    King k = new King(j, i, 1, my);
                    my.blackKing = k;
                    blackPieces.append(k);
                };
                if (j == 3){
                    Queen q = new Queen(j, i, 1, my);
                    blackPieces.append(q);
                };
            };
        };
    };

    my.turn = 0;
};

int display@Board(){
    int whiteOut = 0;

    print("  A B C D E F G H\n");
    for{int i = 0;}(i < 8){i = i + 1;}{
        int setOut;
        if (whiteOut == 0){
            setOut = 1;
        };
        if (whiteOut == 1){
            setOut = 0;
        };
        whiteOut = setOut;

        printInt(i + 1); print("|");

        for{int j = 0;}(j < 8){j = j + 1;}{
                Piece p = my.inspect(j, i);
                if (p != NULL){
                    p.draw();
                    char c = ' ';
                    if (i == my.selectedY){
                        if (j == my.selectedX){
                            c = '*';
                        };
                    };
                    printChar(c);
                    if (whiteOut == 0){
                        setOut = 1;
                    } else if (whiteOut == 1){
                        setOut = 0;
                    };
                    whiteOut = setOut;
                };
                if (p == NULL){
                    if (whiteOut == 0){
                        print("██");
                        setOut = 1;
                    } else if (whiteOut == 1){
                        print("  ");
                        setOut = 0;
                    };
                    whiteOut = setOut;
                };
        };
        print("| "); printInt(i + 1);
        printChar('\n');
    };
    print("  A B C D E F G H\n");
    return 0;
};

int select@Board(int x, int y){
    my.selectedX = x;
    my.selectedY = y;
    return 0;
};

int move@Board(int x, int y){ 
    int turn;
    turn = my.turn;
    int selectedX;
    selectedX = my.selectedX;
    int selectedY;
    selectedY = my.selectedY;
    char 15 b;
    Piece selectedPiece = my.inspect(selectedX, selectedY);

    if (selectedPiece == NULL){
        print("    No piece selected\n");
        print("    Press enter to continue...\n");
        readString(?b);
        return 1;
    };

    if (selectedPiece.color != turn){
        print("    Not your turn\n");
        print("    Press enter to continue...\n");
        readString(?b);
        return 1;
    };

    int fair = selectedPiece.move(x, y, 0);

    if (fair == 0){
        print("    Illegal move\n");
        print("    Press enter to continue...\n");
        readString(?b);
        return 1;
    };

    Piece k;
    ICollection enemies;

    if (turn == 0){
        k = my.whiteKing;
        enemies = my.blackPieces;
    };
    if (turn == 1){
        k = my.blackKing;
        enemies = my.whitePieces;
    };

    // Check if the king will be in danger
    int kingX = k.x;
    int kingY = k.y;
    Pos po = new Pos;
    po.x = kingX;
    po.y = kingY;

    Array danger = enemies.where([Piece en, int i, Pos loc]=>{
        int tx = loc.x;
        int ty = loc.y;
        int safe = en.move(tx, ty, 1);
        if (en.x == -1){
            return 0;
        };
        return safe;
    }, po);

    if (danger.size > 0){
        print("    King is in danger if you make this move\n");
        print("    Press enter to continue...\n");
        selectedPiece.forceMove(selectedX, selectedY);
        readString(?b);
        return 1;
    };

    if (turn == 0){
        my.turn = 1;
    };

    if (turn == 1){
        my.turn = 0;
    };

    return 0;
};

Piece inspect@Board(int x, int y){
    LinkedList blackPieces;
    blackPieces = my.blackPieces;
    LinkedList whitePieces;
    whitePieces = my.whitePieces;

    Piece found = NULL;
    
    Pos po = new Pos;
    po.x = x;
    po.y = y;

    Array onSpace = whitePieces.where([Piece p, int index, Pos me] => {
        int mX;
        mX = me.x;
        int mY;
        mY = me.y;
        int pX;
        pX = p.x;
        int pY;
        pY = p.y;

        if (mX == pX) {
            if (mY == pY) {
                return 1;
            };
        };
        return 0;
    }, po);

    if (onSpace.size > 0){
        adr pointer = onSpace.at(0);
        found = pointer as Piece;
        return found;
    };

    onSpace = blackPieces.where([Piece p, int index, Pos me] => {
        int mX;
        mX = me.x;
        int mY;
        mY = me.y;
        int pX;
        pX = p.x;
        int pY;
        pY = p.y;

        if (mX == pX) {
            if (mY == pY) {
                return 1;
            };
        };
        return 0;
    }, po);

    if (onSpace.size > 0){
        adr pointer = onSpace.at(0);
        found = pointer as Piece;
        return found;
    };

    return found;
};